{
  "KafkaAutoCommit": {
    "BrokerSettings": {
      "bootstrap.servers": "localhost:9092,localhost:9093"
    },
    "ProducerSettings": {
      "client.id": "producer 1", // позволяет идентифицировать клиента в брокерах.
      "acks": "all", // определяет число реплик разделов, получивших сообщение.
      "retries": 2147483647, // определяет число неудачных попыток отправить сообщение, после чего известит клиента о проблеме. 
      "retry.backoff.ms": 100 // определяет задержку перед попыткой повторить неудачный запрос. 
      //"compression.type": "snappy" // применяет указанный алгоритм сжатия данных перед отправкой брокерам.
      //"delivery.timeout.ms": 120000 // Ограничивает время доставки сообщения, включающее задержку перед отправкой, ожидание подтверждения от брокера и время для повторной отправки сообщения при ошибках.
      //"max.in.flight.requests.per.connection": 5 // управляет количеством сообщений, которые продюсер может отправить серверу, не получая ответов. 
      //"request.timeout.ms": 30000, // определяет длительность ожидания продюсером ответа от сервера при отправке данных. 
      //"max.request.size": 1048576, // определяет максимальный размер отправляемого продюсером запроса. 
      //"receive.buffer.bytes": 32768, // определяет размер TCP-буфера, используемого сокетами при чтении данных. 
      //"send.buffer.bytes": 131072 // определяет размер TCP-буфера, используемого сокетами при записи данных. 
      //"metadata.max.age.ms": 300000 // интервал времени обновления метаданных сервера для обнаружения изменений на сервере. 
    },
    "ConsumerSettings": {
      "client.id": "consumer 1", // позволяет идентифицировать клиента в брокерах.
      "group.id": "example-group1", // определяет группу консьюмеров, к которой принадлежит этот консьюмер. 
      "enable.auto.commit": true, // автоматически фиксирует максимальное смещение, возвращаемое методом poll через заданный интервал времени (при новом вызове метода poll или close).
      "auto.commit.interval.ms": 1000, // определяет частоту автоматической фиксации смещений, если enable.auto.commit = true. 
      "heartbeat.interval.ms": 3000, // определяет интервал проверки жизни консюмеров.
      "session.timeout.ms": 10000, // определяет интервал для обнаружения сбоев клиента при управления группами Kafka.
      "auto.offset.reset": "earliest", // определяет поведение консьюмера при начале чтения раздела, для которого отсутствует смещение.
      "enable.auto.offset.store": true, // RD_KAFKA. Automatically store offset of last message provided to application.
      "enable.partition.eof": true // RD_KAFKA. Emit RD_KAFKA_RESP_ERR__PARTITION_EOF event whenever the consumer reaches the end of a partition.
      //"partition.assignment.strategy": "class org.apache.kafka.clients.consumer.RangeAssignor,class org.apache.kafka.clients.consumer.CooperativeStickyAssignor", // определяет способ распределения разделов между консьюмерами в группе.
      //"max.poll.records": 500 // определяет максимальное количество записей, возвращаемых одним вызовом poll. 
      //"fetch.min.bytes": 1, // определяет минимальный объем данных, который сервер должен вернуть консьюмеру.
      //"fetch.max.wait.ms": 500, // определяет максимальное время, которое сервер будет ожидать перед возвратом консьюмеру.
      //"max.partition.fetch.bytes": 1048576, // определяет максимальный объем данных для каждого раздела, который будет возвращать сервер. 
      //"receive.buffer.bytes": 65536, // определяет размер TCP-буфера, используемого сокетами при чтении данных. 
      //"send.buffer.bytes": 131072 // определяет размер TCP-буфера, используемого сокетами при записи данных. 
      //"replica.lag.time.max.ms": 30000 // определяет максимальное время, по истечении которого отстающая реплика будет считаться рассогласованной. 
      //"metadata.max.age.ms": 300000 // интервал времени обновления метаданных сервера для обнаружения изменений на сервере. 
    },
    "SchemaRegistrySettings": {
      "schema.registry.url": "http://localhost:8081"
    },
    "Topics": {
      "RequestTopicName": "request_topic"
    }
  },

  "KafkaManualCommit": {
    "BrokerSettings": {
      "bootstrap.servers": "localhost:9093,localhost:9094"
    },
    "ProducerSettings": {
      "client.id": "producer 2",
      "acks": "all",
      "retries": 2147483647,
      "retry.backoff.ms": 100
    },
    "ConsumerSettings": {
      "client.id": "consumer 2",
      "group.id": "example-group2",
      "enable.auto.commit": false,
      "auto.commit.interval.ms": 1000,
      "heartbeat.interval.ms": 3000,
      "session.timeout.ms": 10000,
      "auto.offset.reset": "earliest",
      "enable.auto.offset.store": true,
      "enable.partition.eof": true
    },
    "SchemaRegistrySettings": {
      "schema.registry.url": "http://localhost:8081"
    },
    "Topics": {
      "RequestTopicName": "request_topic"
    }
  }
}
